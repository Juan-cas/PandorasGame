

open
Opens a file and returns a file descriptor, allowing subsequent operations like reading or writing.
Syntax: int open(const char *pathname, int flags, mode_t mode);

close
Closes a file descriptor, releasing resources associated with it.
Syntax: int close(int fd);

read
Reads data from a file descriptor into a buffer.
Syntax: ssize_t read(int fd, void *buf, size_t count);

write
Writes data from a buffer to a file descriptor.
Syntax: ssize_t write(int fd, const void *buf, size_t count);

printf
Formats and prints data to the standard output.
Syntax: int printf(const char *format, ...);

malloc
Allocates a specified amount of memory dynamically.
Syntax: void *malloc(size_t size);

free
Frees dynamically allocated memory, preventing memory leaks.
Syntax: void free(void *ptr);

perror
Prints a descriptive error message to stderr based on the current value of errno.
Syntax: void perror(const char *s);

strerror
Returns a string describing an error code (e.g., from errno).
Syntax: char *strerror(int errnum);

exit
Terminates the program and performs cleanup.
Syntax: void exit(int status);

gettimeofday
Retrieves the current time and timezone.
Syntax: int gettimeofday(struct timeval *tv, struct timezone *tz);

***** MLX_FUNCTIONS ******

Initialization functions

    mlx_init
    mlx_new_window
    mlx_clear_window
    mlx_destroy_window

Util functions

    mlx_get_color_value
    mlx_pixel_put
    mlx_string_put

Image functions

    mlx_new_image
    mlx_get_data_addr
    mlx_put_image_to_window
    mlx_destroy_image

Hooks

    mlx_mouse_hook
    mlx_key_hook
    mlx_expose_hook
    mlx_loop_hook
    mlx_loop

Image conversions

    mlx_xpm_to_image
    mlx_xpm_file_to_image
    mlx_png_file_to_image

Mouse functions

    mlx_mouse_hide
    mlx_mouse_show
    mlx_mouse_move
    mlx_mouse_get_pos

Key auto repeat

    mlx_do_key_autorepeatoff
    mlx_do_key_autorepeaton

Un-categorized

    mlx_do_sync
    mlx_get_screen_size

***** ALLOWED MATH 3 FUNCTIONS  ****

LIST OF FUNCTIONS

     Each of the functions that use floating-point values are provided in sin-
     gle, double, and extended precision; the double precision prototypes are
     listed here.  The man pages for the individual functions provide more
     details on their use, special cases, and prototypes for their single and
     extended precision versions.

     int fpclassify(double)
     int isfinite(double)
     int isinf(double)
     int isnan(double)
     int isnormal(double)
     int signbit(double)

     These function-like macros are used to classify a single floating-point
     argument.

     double copysign(double, double)
     double nextafter(double, double)

     copysign(x, y) returns the value equal in magnitude to x with the sign of
     y.  nextafter(x, y) returns the next floating-point number after x in the
     direction of y.  Both are correctly-rounded.

     double nan(const char *tag)

     The nan() function returns a quiet NaN, without raising the invalid flag.

     double ceil(double)
     double floor(double)
     double nearbyint(double)
     double rint(double)
     double round(double)
     long int lrint(double)
     long int lround(double)
     long long int llrint(double)
     long long int llround(double)
     double trunc(double)

     These functions provide various means to round floating-point values to
     integral values.  They are correctly rounded.

     double fmod(double, double)
     double remainder(double, double)
     double remquo(double x, double y, int *)

     These return a remainder of the division of x by y with an integral quo-
     tient.  remquo() additionally provides access to a few lower bits of the
     quotient.  They are correctly rounded.

     double fdim(double, double)
     double fmax(double, double)
     double fmin(double, double)

     fmax(x, y) and fmin(x, y) return the maximum and minimum of x and y,
     respectively.  fdim(x, y) returns the positive difference of x and y. All
     are correctly rounded.

     double fma(double x, double y, double z)

     fma(x, y, z) computes the value (x*y) + z as though without intermediate
     rounding.  It is correctly rounded.

     double fabs(double)
     double sqrt(double)
     double cbrt(double)
     double hypot(double, double)

     fabs(x), sqrt(x), and cbrt(x) return the absolute value, square root, and
     cube root of x, respectively.  hypot(x, y) returns sqrt(x*x + y*y).
     fabs() and sqrt() are correctly rounded.

     double exp(double)
     double exp2(double)
     double __exp10(double)
     double expm1(double)

     exp(x), exp2(x), __exp10(x), and expm1(x) return e**x, 2**x, 10**x, and
     e**x - 1, respectively.

     double log(double)
     double log2(double)
     double log10(double)
     double log1p(double)

     log(x), log2(x), and log10(x) return the natural, base-2, and base-10
     logarithms of x, respectively.  log1p(x) returns the natural log of 1+x.

     double logb(double)
     int ilogb(double)

     logb(x) and ilogb(x) return the exponent of x.

     double modf(double, double *)
     double frexp(double, int *)

     modf(x, &y) returns the fractional part of x and stores the integral part
     in y.  frexp(x, &n) returns the mantissa of x and stores the exponent in
     n. They are correctly rounded.

     double ldexp(double, int)
     double scalbn(double, int)
     double scalbln(double, long int)

     ldexp(x, n), scalbn(x, n), and scalbln(x, n) return x*2**n.  They are
     correctly rounded.

     double pow(double, double)

     pow(x,y) returns x raised to the power y.

     double cos(double)
     double sin(double)
     double tan(double)

     cos(x), sin(x), and tan(x) return the cosine, sine and tangent of x,
     respectively.  Note that x is interpreted as specifying an angle in radi-
     ans.

     double cosh(double)
     double sinh(double)
     double tanh(double)

     cosh(x), sinh(x), and tanh(x) return the hyperbolic cosine, hyperbolic
     sine and hyperbolic tangent of x, respectively.

     double acos(double)
     double asin(double)
     double atan(double)
     double atan2(double, double)

     acos(x), asin(x), and atan(x) return the inverse cosine, inverse sine and
     inverse tangent of x, respectively.  Note that the result is an angle in
     radians.  atan2(y, x) returns the inverse tangent of y/x in radians, with
     sign chosen according to the quadrant of (x,y).

     double acosh(double)
     double asinh(double)
     double atanh(double)

     acosh(x), asinh(x), and atanh(x) return the inverse hyperbolic cosine,
     inverse hyperbolic sine and inverse hyperbolic tangent of x, respec-
     tively.

     double tgamma(double)
     double lgamma(double)

     tgamma(x) and lgamma(x) return the values of the gamma function and its
     logarithm evalutated at x, respectively.

     double j0(double)
     double j1(double)
     double jn(int, double)
     double y0(double)
     double y1(double)
     double yn(int, double)

     j0(x), j1(x), and jn(x) return the values of the zeroth, first, and nth
     Bessel function of the first kind evaluated at x, respectively.  y0(x),
     y1(x), and yn(x) return the values of the zeroth, first, and nth Bessel
     function of the second kind evaluated at x, respectively.

     double erf(double)
     double erfc(double)

     erf(x) and erfc(x) return the values of the error function and the com-
     plementary error function evaluated at x, respectively.


